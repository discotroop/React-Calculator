{"version":3,"sources":["components/Button.js","components/Input.js","components/Clear.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","React","Component","Input","previousInput","input","Clear","App","addToInput","setState","state","zeroToInput","length","setOperator","previousNumber","operator","parseNumbers","indexOf","parseFloat","parseInt","resolveInputs","result","previous","current","toString","clearInput","currentNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.217e6efe.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nclass Button extends React.Component {\n  isOperator = val => {\n      return !isNaN(val) || val === \".\" || val === \"=\";\n  }\n  render() {\n    return (\n        <div className={`button \n        ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`} \n        onClick={() => this.props.handleClick(this.props.children)}\n        >\n            {this.props.children}\n        </div> )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport './Input.css';\n\nclass Input extends React.Component {\n  render() {\n    return (\n        <div className=\"input\"> \n        <div> {this.props.previousInput}</div>\n        <div> {this.props.input} </div> \n        </div> )\n    }\n}\n\nexport default Input;","import React from 'react';\nimport './Clear.css';\n\nclass Clear extends React.Component {\n  render() {\n    return (\n        <div className=\"clear\" onClick={() => this.props.handleClick()}>\n            {this.props.children}\n        </div> )\n    }\n}\n\nexport default Clear;","import React from 'react';\nimport './App.css';\nimport Button from './components/Button.js'\nimport Input from './components/Input.js'\nimport Clear from './components/Clear.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    }\n  }\n  addToInput = val => {\n    this.setState({ input: this.state.input + val })\n  }\n  zeroToInput = val => {\n    if (this.state.input.length > 0) {\n      this.setState({ input: this.state.input + val })\n    } else {\n      this.setState();\n    }\n  }\n  setOperator = val => {\n    if (this.state.previousNumber === \"\") {\n      this.setState({\n        previousNumber: this.state.input\n      })\n    }\n    this.setState({ \n      operator: val,\n      input: \"\"\n     })\n    this.setState();\n  }\n  parseNumbers = val => {\n    if(val.indexOf('.' !== -1)) {\n      return parseFloat(val);\n    } else {\n      return parseInt(val);\n    }\n  }\n  resolveInputs = () => {\n    let result = 0;\n    let operator = this.state.operator;\n    let previous = this.parseNumbers(this.state.previousNumber);\n    let current = this.parseNumbers(this.state.input)\n    if (this.state.operator === \"\") {\n      return;\n    } else {\n      if(operator === \"+\") {\n        result = previous + current;\n      } else if (operator === \"*\") {\n        result = previous * current;\n      } else if (operator === \"/\") {\n        result = previous/current;\n      } else if (operator === \"-\") {\n        result = previous - current;\n      }\n    }\n    this.setState({\n      input: \"\",\n      previousNumber: result.toString(),\n      operator: \"\"\n    })\n  }\n  clearInput = val => {\n    this.setState({ input: \"\"});\n  }\n  \n  render() {\n   return (\n    <div className=\"App\">\n      <div className=\"calc-container\">\n        <div className=\"row\">\n          <Input input={this.state.input} previousInput={this.state.previousNumber + \" \" + this.state.operator}></Input>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>7</Button>\n          <Button handleClick={this.addToInput}>8</Button>\n          <Button handleClick={this.addToInput}>9</Button>\n          <Button handleClick={this.setOperator}>/</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>4</Button>\n          <Button handleClick={this.addToInput}>5</Button>\n          <Button handleClick={this.addToInput}>6</Button>\n          <Button handleClick={this.setOperator}>*</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>1</Button>\n          <Button handleClick={this.addToInput}>2</Button>\n          <Button handleClick={this.addToInput}>3</Button>\n          <Button handleClick={this.setOperator}>+</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>.</Button>\n          <Button handleClick={this.zeroToInput}>0</Button>\n          <Button handleClick={this.resolveInputs}>=</Button>\n          <Button handleClick={this.setOperator}>-</Button>\n        </div>\n        <div className=\"row\">\n          <Clear handleClick={this.clearInput}>Clear</Clear>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}